var pJS = function (a, h) { var k = document.querySelector('#' + a + ' > .particles-js-canvas-el'); this.pJS = { canvas: { el: k, w: k.offsetWidth, h: k.offsetHeight }, particles: { number: { value: 400, density: { enable: !0, value_area: 800 } }, color: { value: '#fff' }, shape: { type: 'circle', stroke: { width: 0, color: '#ff0000' }, polygon: { nb_sides: 5 }, image: { src: '', width: 100, height: 100 } }, opacity: { value: 1, random: !1, anim: { enable: !1, speed: 2, opacity_min: 0, sync: !1 } }, size: { value: 20, random: !1, anim: { enable: !1, speed: 20, size_min: 0, sync: !1 } }, line_linked: { enable: !0, distance: 100, color: '#fff', opacity: 1, width: 1 }, move: { enable: !0, speed: 2, direction: 'none', random: !1, straight: !1, out_mode: 'out', bounce: !1, attract: { enable: !1, rotateX: 3e3, rotateY: 3e3 } }, array: [] }, interactivity: { detect_on: 'canvas', events: { onhover: { enable: !0, mode: 'grab' }, onclick: { enable: !0, mode: 'push' }, resize: !0 }, modes: { grab: { distance: 100, line_linked: { opacity: 1 } }, bubble: { distance: 200, size: 80, duration: 0.4 }, repulse: { distance: 200, duration: 0.4 }, push: { particles_nb: 4 }, remove: { particles_nb: 2 } }, mouse: {} }, retina_detect: !1, fn: { interact: {}, modes: {}, vendors: {} }, tmp: {} }; var l = this.pJS; h && Object.deepExtend(l, h), l.tmp.obj = { size_value: l.particles.size.value, size_anim_speed: l.particles.size.anim.speed, move_speed: l.particles.move.speed, line_linked_distance: l.particles.line_linked.distance, line_linked_width: l.particles.line_linked.width, mode_grab_distance: l.interactivity.modes.grab.distance, mode_bubble_distance: l.interactivity.modes.bubble.distance, mode_bubble_size: l.interactivity.modes.bubble.size, mode_repulse_distance: l.interactivity.modes.repulse.distance }, l.fn.retinaInit = function () { l.retina_detect && 1 < window.devicePixelRatio ? (l.canvas.pxratio = window.devicePixelRatio, l.tmp.retina = !0) : (l.canvas.pxratio = 1, l.tmp.retina = !1), l.canvas.w = l.canvas.el.offsetWidth * l.canvas.pxratio, l.canvas.h = l.canvas.el.offsetHeight * l.canvas.pxratio, l.particles.size.value = l.tmp.obj.size_value * l.canvas.pxratio, l.particles.size.anim.speed = l.tmp.obj.size_anim_speed * l.canvas.pxratio, l.particles.move.speed = l.tmp.obj.move_speed * l.canvas.pxratio, l.particles.line_linked.distance = l.tmp.obj.line_linked_distance * l.canvas.pxratio, l.interactivity.modes.grab.distance = l.tmp.obj.mode_grab_distance * l.canvas.pxratio, l.interactivity.modes.bubble.distance = l.tmp.obj.mode_bubble_distance * l.canvas.pxratio, l.particles.line_linked.width = l.tmp.obj.line_linked_width * l.canvas.pxratio, l.interactivity.modes.bubble.size = l.tmp.obj.mode_bubble_size * l.canvas.pxratio, l.interactivity.modes.repulse.distance = l.tmp.obj.mode_repulse_distance * l.canvas.pxratio }, l.fn.canvasInit = function () { l.canvas.ctx = l.canvas.el.getContext('2d') }, l.fn.canvasSize = function () { l.canvas.el.width = l.canvas.w, l.canvas.el.height = l.canvas.h, l && l.interactivity.events.resize && window.addEventListener('resize', function () { l.canvas.w = l.canvas.el.offsetWidth, l.canvas.h = l.canvas.el.offsetHeight, l.tmp.retina && (l.canvas.w *= l.canvas.pxratio, l.canvas.h *= l.canvas.pxratio), l.canvas.el.width = l.canvas.w, l.canvas.el.height = l.canvas.h, l.particles.move.enable || (l.fn.particlesEmpty(), l.fn.particlesCreate(), l.fn.particlesDraw(), l.fn.vendors.densityAutoParticles()), l.fn.vendors.densityAutoParticles() }) }, l.fn.canvasPaint = function () { l.canvas.ctx.fillRect(0, 0, l.canvas.w, l.canvas.h) }, l.fn.canvasClear = function () { l.canvas.ctx.clearRect(0, 0, l.canvas.w, l.canvas.h) }, l.fn.particle = function (n, o, q) { if (this.radius = (l.particles.size.random ? Math.random() : 1) * l.particles.size.value, l.particles.size.anim.enable && (this.size_status = !1, this.vs = l.particles.size.anim.speed / 100, !l.particles.size.anim.sync && (this.vs *= Math.random())), this.x = q ? q.x : Math.random() * l.canvas.w, this.y = q ? q.y : Math.random() * l.canvas.h, this.x > l.canvas.w - 2 * this.radius ? this.x -= this.radius : this.x < 2 * this.radius && (this.x += this.radius), this.y > l.canvas.h - 2 * this.radius ? this.y -= this.radius : this.y < 2 * this.radius && (this.y += this.radius), l.particles.move.bounce && l.fn.vendors.checkOverlap(this, q), this.color = {}, 'object' != typeof n.value) 'random' == n.value ? this.color.rgb = { r: Math.floor(256 * Math.random()) + 0, g: Math.floor(256 * Math.random()) + 0, b: Math.floor(256 * Math.random()) + 0 } : 'string' == typeof n.value && (this.color = n, this.color.rgb = hexToRgb(this.color.value)); else if (n.value instanceof Array) { var s = n.value[Math.floor(Math.random() * l.particles.color.value.length)]; this.color.rgb = hexToRgb(s) } else void 0 != n.value.r && void 0 != n.value.g && void 0 != n.value.b && (this.color.rgb = { r: n.value.r, g: n.value.g, b: n.value.b }), void 0 != n.value.h && void 0 != n.value.s && void 0 != n.value.l && (this.color.hsl = { h: n.value.h, s: n.value.s, l: n.value.l }); this.opacity = (l.particles.opacity.random ? Math.random() : 1) * l.particles.opacity.value, l.particles.opacity.anim.enable && (this.opacity_status = !1, this.vo = l.particles.opacity.anim.speed / 100, !l.particles.opacity.anim.sync && (this.vo *= Math.random())); var t = {}; switch (l.particles.move.direction) { case 'top': t = { x: 0, y: -1 }; break; case 'top-right': t = { x: 0.5, y: -0.5 }; break; case 'right': t = { x: 1, y: -0 }; break; case 'bottom-right': t = { x: 0.5, y: 0.5 }; break; case 'bottom': t = { x: 0, y: 1 }; break; case 'bottom-left': t = { x: -0.5, y: 1 }; break; case 'left': t = { x: -1, y: 0 }; break; case 'top-left': t = { x: -0.5, y: -0.5 }; break; default: t = { x: 0, y: 0 }; }l.particles.move.straight ? (this.vx = t.x, this.vy = t.y, l.particles.move.random && (this.vx *= Math.random(), this.vy *= Math.random())) : (this.vx = t.x + Math.random() - 0.5, this.vy = t.y + Math.random() - 0.5), this.vx_i = this.vx, this.vy_i = this.vy; var u = l.particles.shape.type; if ('object' != typeof u) this.shape = u; else if (u instanceof Array) { var v = u[Math.floor(Math.random() * u.length)]; this.shape = v } if ('image' == this.shape) { var w = l.particles.shape; this.img = { src: w.image.src, ratio: w.image.width / w.image.height }, this.img.ratio || (this.img.ratio = 1), 'svg' == l.tmp.img_type && void 0 != l.tmp.source_svg && (l.fn.vendors.createSvgImg(this), l.tmp.pushing && (this.img.loaded = !1)) } }, l.fn.particle.prototype.draw = function () { var n = this; if (void 0 != n.radius_bubble) var o = n.radius_bubble; else var o = n.radius; if (void 0 != n.opacity_bubble) var q = n.opacity_bubble; else var q = n.opacity; if (n.color.rgb) var s = 'rgba(' + n.color.rgb.r + ',' + n.color.rgb.g + ',' + n.color.rgb.b + ',' + q + ')'; else var s = 'hsla(' + n.color.hsl.h + ',' + n.color.hsl.s + '%,' + n.color.hsl.l + '%,' + q + ')'; switch (l.canvas.ctx.fillStyle = s, l.canvas.ctx.beginPath(), n.shape) { case 'circle': l.canvas.ctx.arc(n.x, n.y, o, 0, 2 * Math.PI, !1); break; case 'edge': l.canvas.ctx.rect(n.x - o, n.y - o, 2 * o, 2 * o); break; case 'triangle': l.fn.vendors.drawShape(l.canvas.ctx, n.x - o, n.y + o / 1.66, 2 * o, 3, 2); break; case 'polygon': l.fn.vendors.drawShape(l.canvas.ctx, n.x - o / (l.particles.shape.polygon.nb_sides / 3.5), n.y - o / (2.66 / 3.5), 2.66 * o / (l.particles.shape.polygon.nb_sides / 3), l.particles.shape.polygon.nb_sides, 1); break; case 'star': l.fn.vendors.drawShape(l.canvas.ctx, n.x - 2 * o / (l.particles.shape.polygon.nb_sides / 4), n.y - o / (2 * 2.66 / 3.5), 2.66 * (2 * o) / (l.particles.shape.polygon.nb_sides / 3), l.particles.shape.polygon.nb_sides, 2); break; case 'image': if ('svg' == l.tmp.img_type) var t = n.img.obj; else var t = l.tmp.img_obj; t && function () { l.canvas.ctx.drawImage(t, n.x - o, n.y - o, 2 * o, 2 * o / n.img.ratio) }(); }l.canvas.ctx.closePath(), 0 < l.particles.shape.stroke.width && (l.canvas.ctx.strokeStyle = l.particles.shape.stroke.color, l.canvas.ctx.lineWidth = l.particles.shape.stroke.width, l.canvas.ctx.stroke()), l.canvas.ctx.fill() }, l.fn.particlesCreate = function () { for (var n = 0; n < l.particles.number.value; n++)l.particles.array.push(new l.fn.particle(l.particles.color, l.particles.opacity.value)) }, l.fn.particlesUpdate = function () { for (var o, n = 0; n < l.particles.array.length; n++) { if (o = l.particles.array[n], l.particles.move.enable) { var q = l.particles.move.speed / 2; o.x += o.vx * q, o.y += o.vy * q } if (l.particles.opacity.anim.enable && (!0 == o.opacity_status ? (o.opacity >= l.particles.opacity.value && (o.opacity_status = !1), o.opacity += o.vo) : (o.opacity <= l.particles.opacity.anim.opacity_min && (o.opacity_status = !0), o.opacity -= o.vo), 0 > o.opacity && (o.opacity = 0)), l.particles.size.anim.enable && (!0 == o.size_status ? (o.radius >= l.particles.size.value && (o.size_status = !1), o.radius += o.vs) : (o.radius <= l.particles.size.anim.size_min && (o.size_status = !0), o.radius -= o.vs), 0 > o.radius && (o.radius = 0)), 'bounce' == l.particles.move.out_mode) var s = { x_left: o.radius, x_right: l.canvas.w, y_top: o.radius, y_bottom: l.canvas.h }; else var s = { x_left: -o.radius, x_right: l.canvas.w + o.radius, y_top: -o.radius, y_bottom: l.canvas.h + o.radius }; switch (o.x - o.radius > l.canvas.w ? (o.x = s.x_left, o.y = Math.random() * l.canvas.h) : 0 > o.x + o.radius && (o.x = s.x_right, o.y = Math.random() * l.canvas.h), o.y - o.radius > l.canvas.h ? (o.y = s.y_top, o.x = Math.random() * l.canvas.w) : 0 > o.y + o.radius && (o.y = s.y_bottom, o.x = Math.random() * l.canvas.w), l.particles.move.out_mode) { case 'bounce': o.x + o.radius > l.canvas.w ? o.vx = -o.vx : 0 > o.x - o.radius && (o.vx = -o.vx), o.y + o.radius > l.canvas.h ? o.vy = -o.vy : 0 > o.y - o.radius && (o.vy = -o.vy); }if (isInArray('grab', l.interactivity.events.onhover.mode) && l.fn.modes.grabParticle(o), (isInArray('bubble', l.interactivity.events.onhover.mode) || isInArray('bubble', l.interactivity.events.onclick.mode)) && l.fn.modes.bubbleParticle(o), (isInArray('repulse', l.interactivity.events.onhover.mode) || isInArray('repulse', l.interactivity.events.onclick.mode)) && l.fn.modes.repulseParticle(o), l.particles.line_linked.enable || l.particles.move.attract.enable) for (var u, t = n + 1; t < l.particles.array.length; t++)u = l.particles.array[t], l.particles.line_linked.enable && l.fn.interact.linkParticles(o, u), l.particles.move.attract.enable && l.fn.interact.attractParticles(o, u), l.particles.move.bounce && l.fn.interact.bounceParticles(o, u) } }, l.fn.particlesDraw = function () { l.canvas.ctx.clearRect(0, 0, l.canvas.w, l.canvas.h), l.fn.particlesUpdate(); for (var o, n = 0; n < l.particles.array.length; n++)o = l.particles.array[n], o.draw() }, l.fn.particlesEmpty = function () { l.particles.array = [] }, l.fn.particlesRefresh = function () { cancelRequestAnimFrame(l.fn.checkAnimFrame), cancelRequestAnimFrame(l.fn.drawAnimFrame), l.tmp.source_svg = void 0, l.tmp.img_obj = void 0, l.tmp.count_svg = 0, l.fn.particlesEmpty(), l.fn.canvasClear(), l.fn.vendors.start() }, l.fn.interact.linkParticles = function (n, o) { var q = n.x - o.x, s = n.y - o.y, t = Math.sqrt(q * q + s * s); if (t <= l.particles.line_linked.distance) { var u = l.particles.line_linked.opacity - t / (1 / l.particles.line_linked.opacity) / l.particles.line_linked.distance; if (0 < u) { var v = l.particles.line_linked.color_rgb_line; l.canvas.ctx.strokeStyle = 'rgba(' + v.r + ',' + v.g + ',' + v.b + ',' + u + ')', l.canvas.ctx.lineWidth = l.particles.line_linked.width, l.canvas.ctx.beginPath(), l.canvas.ctx.moveTo(n.x, n.y), l.canvas.ctx.lineTo(o.x, o.y), l.canvas.ctx.stroke(), l.canvas.ctx.closePath() } } }, l.fn.interact.attractParticles = function (n, o) { var q = n.x - o.x, s = n.y - o.y, t = Math.sqrt(q * q + s * s); if (t <= l.particles.line_linked.distance) { var u = q / (1e3 * l.particles.move.attract.rotateX), v = s / (1e3 * l.particles.move.attract.rotateY); n.vx -= u, n.vy -= v, o.vx += u, o.vy += v } }, l.fn.interact.bounceParticles = function (n, o) { var q = n.x - o.x, s = n.y - o.y, t = Math.sqrt(q * q + s * s), u = n.radius + o.radius; t <= u && (n.vx = -n.vx, n.vy = -n.vy, o.vx = -o.vx, o.vy = -o.vy) }, l.fn.modes.pushParticles = function (n, o) { l.tmp.pushing = !0; for (var q = 0; q < n; q++)l.particles.array.push(new l.fn.particle(l.particles.color, l.particles.opacity.value, { x: o ? o.pos_x : Math.random() * l.canvas.w, y: o ? o.pos_y : Math.random() * l.canvas.h })), q == n - 1 && (!l.particles.move.enable && l.fn.particlesDraw(), l.tmp.pushing = !1) }, l.fn.modes.removeParticles = function (n) { l.particles.array.splice(0, n), l.particles.move.enable || l.fn.particlesDraw() }, l.fn.modes.bubbleParticle = function (n) { if (l.interactivity.events.onhover.enable && isInArray('bubble', l.interactivity.events.onhover.mode)) { function y() { n.opacity_bubble = n.opacity, n.radius_bubble = n.radius } var o = n.x - l.interactivity.mouse.pos_x, q = n.y - l.interactivity.mouse.pos_y, s = Math.sqrt(o * o + q * q), t = 1 - s / l.interactivity.modes.bubble.distance; if (!(s <= l.interactivity.modes.bubble.distance)) y(); else if (0 <= t && 'mousemove' == l.interactivity.status) { if (l.interactivity.modes.bubble.size != l.particles.size.value) if (l.interactivity.modes.bubble.size > l.particles.size.value) { var u = n.radius + l.interactivity.modes.bubble.size * t; 0 <= u && (n.radius_bubble = u) } else { var v = n.radius - l.interactivity.modes.bubble.size, u = n.radius - v * t; n.radius_bubble = 0 < u ? u : 0 } if (l.interactivity.modes.bubble.opacity != l.particles.opacity.value) if (l.interactivity.modes.bubble.opacity > l.particles.opacity.value) { var w = l.interactivity.modes.bubble.opacity * t; w > n.opacity && w <= l.interactivity.modes.bubble.opacity && (n.opacity_bubble = w) } else { var w = n.opacity - (l.particles.opacity.value - l.interactivity.modes.bubble.opacity) * t; w < n.opacity && w >= l.interactivity.modes.bubble.opacity && (n.opacity_bubble = w) } } 'mouseleave' == l.interactivity.status && y() } else if (l.interactivity.events.onclick.enable && isInArray('bubble', l.interactivity.events.onclick.mode)) { function y(z, A, B, C, D) { if (z != A) if (!l.tmp.bubble_duration_end) { if (s <= l.interactivity.modes.bubble.distance) { if (void 0 != B) var E = B; else var E = C; if (E != z) { var F = C - x * (C - z) / l.interactivity.modes.bubble.duration; 'size' == D && (n.radius_bubble = F), 'opacity' == D && (n.opacity_bubble = F) } } else 'size' == D && (n.radius_bubble = void 0), 'opacity' == D && (n.opacity_bubble = void 0); } else if (void 0 != B) { var G = C - x * (C - z) / l.interactivity.modes.bubble.duration; F = z + (z - G), 'size' == D && (n.radius_bubble = F), 'opacity' == D && (n.opacity_bubble = F) } } if (l.tmp.bubble_clicking) { var o = n.x - l.interactivity.mouse.click_pos_x, q = n.y - l.interactivity.mouse.click_pos_y, s = Math.sqrt(o * o + q * q), x = (new Date().getTime() - l.interactivity.mouse.click_time) / 1e3; x > l.interactivity.modes.bubble.duration && (l.tmp.bubble_duration_end = !0), x > 2 * l.interactivity.modes.bubble.duration && (l.tmp.bubble_clicking = !1, l.tmp.bubble_duration_end = !1) } l.tmp.bubble_clicking && (y(l.interactivity.modes.bubble.size, l.particles.size.value, n.radius_bubble, n.radius, 'size'), y(l.interactivity.modes.bubble.opacity, l.particles.opacity.value, n.opacity_bubble, n.opacity, 'opacity')) } }, l.fn.modes.repulseParticle = function (n) { if (l.interactivity.events.onhover.enable && isInArray('repulse', l.interactivity.events.onhover.mode) && 'mousemove' == l.interactivity.status) { var o = n.x - l.interactivity.mouse.pos_x, q = n.y - l.interactivity.mouse.pos_y, s = Math.sqrt(o * o + q * q), t = { x: o / s, y: q / s }, u = l.interactivity.modes.repulse.distance, w = clamp(1 / u * (-1 * Math.pow(s / u, 2) + 1) * u * 100, 0, 50), x = { x: n.x + t.x * w, y: n.y + t.y * w }; 'bounce' == l.particles.move.out_mode ? (0 < x.x - n.radius && x.x + n.radius < l.canvas.w && (n.x = x.x), 0 < x.y - n.radius && x.y + n.radius < l.canvas.h && (n.y = x.y)) : (n.x = x.x, n.y = x.y) } else if (l.interactivity.events.onclick.enable && isInArray('repulse', l.interactivity.events.onclick.mode)) if (l.tmp.repulse_finish || (l.tmp.repulse_count++ , l.tmp.repulse_count == l.particles.array.length && (l.tmp.repulse_finish = !0)), l.tmp.repulse_clicking) { var u = Math.pow(l.interactivity.modes.repulse.distance / 6, 3), y = l.interactivity.mouse.click_pos_x - n.x, z = l.interactivity.mouse.click_pos_y - n.y, A = y * y + z * z, B = 1 * (-u / A); A <= u && function () { var D = Math.atan2(z, y); if (n.vx = B * Math.cos(D), n.vy = B * Math.sin(D), 'bounce' == l.particles.move.out_mode) { var E = { x: n.x + n.vx, y: n.y + n.vy }; E.x + n.radius > l.canvas.w ? n.vx = -n.vx : 0 > E.x - n.radius && (n.vx = -n.vx), E.y + n.radius > l.canvas.h ? n.vy = -n.vy : 0 > E.y - n.radius && (n.vy = -n.vy) } }() } else !1 == l.tmp.repulse_clicking && (n.vx = n.vx_i, n.vy = n.vy_i) }, l.fn.modes.grabParticle = function (n) { if (l.interactivity.events.onhover.enable && 'mousemove' == l.interactivity.status) { var o = n.x - l.interactivity.mouse.pos_x, q = n.y - l.interactivity.mouse.pos_y, s = Math.sqrt(o * o + q * q); if (s <= l.interactivity.modes.grab.distance) { var t = l.interactivity.modes.grab.line_linked.opacity - s / (1 / l.interactivity.modes.grab.line_linked.opacity) / l.interactivity.modes.grab.distance; if (0 < t) { var u = l.particles.line_linked.color_rgb_line; l.canvas.ctx.strokeStyle = 'rgba(' + u.r + ',' + u.g + ',' + u.b + ',' + t + ')', l.canvas.ctx.lineWidth = l.particles.line_linked.width, l.canvas.ctx.beginPath(), l.canvas.ctx.moveTo(n.x, n.y), l.canvas.ctx.lineTo(l.interactivity.mouse.pos_x, l.interactivity.mouse.pos_y), l.canvas.ctx.stroke(), l.canvas.ctx.closePath() } } } }, l.fn.vendors.eventsListeners = function () { l.interactivity.el = 'window' == l.interactivity.detect_on ? window : l.canvas.el, (l.interactivity.events.onhover.enable || l.interactivity.events.onclick.enable) && (l.interactivity.el.addEventListener('mousemove', function (n) { if (l.interactivity.el == window) var o = n.clientX, q = n.clientY; else var o = n.offsetX || n.clientX, q = n.offsetY || n.clientY; l.interactivity.mouse.pos_x = o, l.interactivity.mouse.pos_y = q, l.tmp.retina && (l.interactivity.mouse.pos_x *= l.canvas.pxratio, l.interactivity.mouse.pos_y *= l.canvas.pxratio), l.interactivity.status = 'mousemove' }), l.interactivity.el.addEventListener('mouseleave', function () { l.interactivity.mouse.pos_x = null, l.interactivity.mouse.pos_y = null, l.interactivity.status = 'mouseleave' })), l.interactivity.events.onclick.enable && l.interactivity.el.addEventListener('click', function () { if (l.interactivity.mouse.click_pos_x = l.interactivity.mouse.pos_x, l.interactivity.mouse.click_pos_y = l.interactivity.mouse.pos_y, l.interactivity.mouse.click_time = new Date().getTime(), l.interactivity.events.onclick.enable) switch (l.interactivity.events.onclick.mode) { case 'push': l.particles.move.enable ? l.fn.modes.pushParticles(l.interactivity.modes.push.particles_nb, l.interactivity.mouse) : 1 == l.interactivity.modes.push.particles_nb ? l.fn.modes.pushParticles(l.interactivity.modes.push.particles_nb, l.interactivity.mouse) : 1 < l.interactivity.modes.push.particles_nb && l.fn.modes.pushParticles(l.interactivity.modes.push.particles_nb); break; case 'remove': l.fn.modes.removeParticles(l.interactivity.modes.remove.particles_nb); break; case 'bubble': l.tmp.bubble_clicking = !0; break; case 'repulse': l.tmp.repulse_clicking = !0, l.tmp.repulse_count = 0, l.tmp.repulse_finish = !1, setTimeout(function () { l.tmp.repulse_clicking = !1 }, 1e3 * l.interactivity.modes.repulse.duration); } }) }, l.fn.vendors.densityAutoParticles = function () { if (l.particles.number.density.enable) { var n = l.canvas.el.width * l.canvas.el.height / 1e3; l.tmp.retina && (n /= 2 * l.canvas.pxratio); var o = n * l.particles.number.value / l.particles.number.density.value_area, q = l.particles.array.length - o; 0 > q ? l.fn.modes.pushParticles(Math.abs(q)) : l.fn.modes.removeParticles(q) } }, l.fn.vendors.checkOverlap = function (n, o) { for (var q = 0; q < l.particles.array.length; q++) { var s = l.particles.array[q], t = n.x - s.x, u = n.y - s.y, v = Math.sqrt(t * t + u * u); v <= n.radius + s.radius && (n.x = o ? o.x : Math.random() * l.canvas.w, n.y = o ? o.y : Math.random() * l.canvas.h, l.fn.vendors.checkOverlap(n)) } }, l.fn.vendors.createSvgImg = function (n) { var o = l.tmp.source_svg, q = /#([0-9A-F]{3,6})/gi, s = o.replace(q, function () { if (n.color.rgb) var B = 'rgba(' + n.color.rgb.r + ',' + n.color.rgb.g + ',' + n.color.rgb.b + ',' + n.opacity + ')'; else var B = 'hsla(' + n.color.hsl.h + ',' + n.color.hsl.s + '%,' + n.color.hsl.l + '%,' + n.opacity + ')'; return B }), t = new Blob([s], { type: 'image/svg+xml;charset=utf-8' }), u = window.URL || window.webkitURL || window, v = u.createObjectURL(t), w = new Image; w.addEventListener('load', function () { n.img.obj = w, n.img.loaded = !0, u.revokeObjectURL(v), l.tmp.count_svg++ }), w.src = v }, l.fn.vendors.destroypJS = function () { cancelAnimationFrame(l.fn.drawAnimFrame), k.remove(), pJSDom = null }, l.fn.vendors.drawShape = function (n, o, q, s, t, u) { var w = t / u, y = Math.PI - Math.PI * (180 * (w - 2) / w) / 180; n.save(), n.beginPath(), n.translate(o, q), n.moveTo(0, 0); for (var z = 0; z < t * u; z++)n.lineTo(s, 0), n.translate(s, 0), n.rotate(y); n.fill(), n.restore() }, l.fn.vendors.exportImg = function () { window.open(l.canvas.el.toDataURL('image/png'), '_blank') }, l.fn.vendors.loadImg = function (n) { if (l.tmp.img_error = void 0, '' == l.particles.shape.image.src) console.log('Error pJS - No image.src'), l.tmp.img_error = !0; else if ('svg' == n) { var o = new XMLHttpRequest; o.open('GET', l.particles.shape.image.src), o.onreadystatechange = function (s) { 4 == o.readyState && (200 == o.status ? (l.tmp.source_svg = s.currentTarget.response, l.fn.vendors.checkBeforeDraw()) : (console.log('Error pJS - Image not found'), l.tmp.img_error = !0)) }, o.send() } else { var q = new Image; q.addEventListener('load', function () { l.tmp.img_obj = q, l.fn.vendors.checkBeforeDraw() }), q.src = l.particles.shape.image.src } }, l.fn.vendors.draw = function () { 'image' == l.particles.shape.type ? 'svg' == l.tmp.img_type ? l.tmp.count_svg >= l.particles.number.value ? (l.fn.particlesDraw(), l.particles.move.enable ? l.fn.drawAnimFrame = requestAnimFrame(l.fn.vendors.draw) : cancelRequestAnimFrame(l.fn.drawAnimFrame)) : !l.tmp.img_error && (l.fn.drawAnimFrame = requestAnimFrame(l.fn.vendors.draw)) : l.tmp.img_obj == void 0 ? !l.tmp.img_error && (l.fn.drawAnimFrame = requestAnimFrame(l.fn.vendors.draw)) : (l.fn.particlesDraw(), l.particles.move.enable ? l.fn.drawAnimFrame = requestAnimFrame(l.fn.vendors.draw) : cancelRequestAnimFrame(l.fn.drawAnimFrame)) : (l.fn.particlesDraw(), l.particles.move.enable ? l.fn.drawAnimFrame = requestAnimFrame(l.fn.vendors.draw) : cancelRequestAnimFrame(l.fn.drawAnimFrame)) }, l.fn.vendors.checkBeforeDraw = function () { 'image' == l.particles.shape.type ? 'svg' == l.tmp.img_type && l.tmp.source_svg == void 0 ? l.tmp.checkAnimFrame = requestAnimFrame(check) : (cancelRequestAnimFrame(l.tmp.checkAnimFrame), !l.tmp.img_error && (l.fn.vendors.init(), l.fn.vendors.draw())) : (l.fn.vendors.init(), l.fn.vendors.draw()) }, l.fn.vendors.init = function () { l.fn.retinaInit(), l.fn.canvasInit(), l.fn.canvasSize(), l.fn.canvasPaint(), l.fn.particlesCreate(), l.fn.vendors.densityAutoParticles(), l.particles.line_linked.color_rgb_line = hexToRgb(l.particles.line_linked.color) }, l.fn.vendors.start = function () { isInArray('image', l.particles.shape.type) ? (l.tmp.img_type = l.particles.shape.image.src.substr(l.particles.shape.image.src.length - 3), l.fn.vendors.loadImg(l.tmp.img_type)) : l.fn.vendors.checkBeforeDraw() }, l.fn.vendors.eventsListeners(), l.fn.vendors.start() }; Object.deepExtend = function a(h, k) { for (var l in k) k[l] && k[l].constructor && k[l].constructor === Object ? (h[l] = h[l] || {}, a(h[l], k[l])) : h[l] = k[l]; return h }, window.requestAnimFrame = function () { return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (a) { window.setTimeout(a, 1e3 / 60) } }(), window.cancelRequestAnimFrame = function () { return window.cancelAnimationFrame || window.webkitCancelRequestAnimationFrame || window.mozCancelRequestAnimationFrame || window.oCancelRequestAnimationFrame || window.msCancelRequestAnimationFrame || clearTimeout }(); function hexToRgb(a) { var h = /^#?([a-f\d])([a-f\d])([a-f\d])$/i; a = a.replace(h, function (l, n, o, q) { return n + n + o + o + q + q }); var k = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(a); return k ? { r: parseInt(k[1], 16), g: parseInt(k[2], 16), b: parseInt(k[3], 16) } : null } function clamp(a, h, k) { return Math.min(Math.max(a, h), k) } function isInArray(a, h) { return -1 < h.indexOf(a) } window.pJSDom = [], window.particlesJS = function (a, h) { 'string' != typeof a && (h = a, a = 'particles-js'), a || (a = 'particles-js'); var k = document.getElementById(a), l = 'particles-js-canvas-el', n = k.getElementsByClassName(l); if (n.length) for (; 0 < n.length;)k.removeChild(n[0]); var o = document.createElement('canvas'); o.className = l, o.style.width = '100%', o.style.height = '100%'; var q = document.getElementById(a).appendChild(o); null != q && pJSDom.push(new pJS(a, h)) }, window.particlesJS.load = function (a, h, k) { var l = new XMLHttpRequest; l.open('GET', h), l.onreadystatechange = function (n) { if (4 == l.readyState) if (200 == l.status) { var o = JSON.parse(n.currentTarget.response); window.particlesJS(a, o), k && k() } else console.log('Error pJS - XMLHttpRequest status: ' + l.status), console.log('Error pJS - File config not found') }, l.send() };